# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

#    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      - run:
          name: generate plans
          command: |
            . venv/bin/activate
            #pwd
            #find .
            
            #Add here to enable different subdirs for ci. These are case sensitive
            ./generate_all.sh AndyW
            # ./generate_all.sh GreggR
            # ./generate_all.sh ErinM
            # ./generate_all.sh DaveyC
      - store_artifacts:
          path: plans
          destination: plans
      - add_ssh_keys:
          fingerprints:
            - "e3:f5:9a:d2:8c:76:f8:0b:ee:8b:92:7c:d6:d8:5a:00"         
      - deploy:
          name: Deploy to github
          command: |
              git config credential.helper 'cache --timeout=120'
              git config --global user.name "circleci"
              git config user.email "circleci@circleci.com"
              git checkout -b plans
             
              
              if output=$(git status --porcelain) && [ -z "$output" ]; then
              # Working directory clean
                echo "Nothing to push"
              else 
              # Uncommitted changes
                git add plans/*
                git commit --allow-empty -m "Circle CI build ${CIRCLE_BUILD_NUM}"
                git push -f origin plans
              fi
              
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:  # using regex filters requires the entire branch to match
            branches:
              only:  #only run the build on master
                - master